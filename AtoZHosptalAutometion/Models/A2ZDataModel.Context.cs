//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AtoZHosptalAutometion.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountPayable> AccountPayables { get; set; }
        public virtual DbSet<AccountReceivable> AccountReceivables { get; set; }
        public virtual DbSet<Agent> Agents { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<Expens> Expenses { get; set; }
        public virtual DbSet<ExpenseTamp> ExpenseTamps { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Honorarium> Honoraria { get; set; }
        public virtual DbSet<Income> Incomes { get; set; }
        public virtual DbSet<IncomeTamp> IncomeTamps { get; set; }
        public virtual DbSet<IndoorIncomeTamp> IndoorIncomeTamps { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceSub> InvoiceSubs { get; set; }
        public virtual DbSet<InvoiceType> InvoiceTypes { get; set; }
        public virtual DbSet<Medicine> Medicines { get; set; }
        public virtual DbSet<MedicinePurchaseTemp> MedicinePurchaseTemps { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientSub> PatientSubs { get; set; }
        public virtual DbSet<productinfo> productinfoes { get; set; }
        public virtual DbSet<Purchase> Purchases { get; set; }
        public virtual DbSet<Sale> Sales { get; set; }
        public virtual DbSet<SalesTemp> SalesTemps { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Voucher> Vouchers { get; set; }
        public virtual DbSet<vwInDoorService> vwInDoorServices { get; set; }
        public virtual DbSet<VWMedicineStorage> VWMedicineStorages { get; set; }
        public virtual DbSet<vwOutDoorService> vwOutDoorServices { get; set; }
        public virtual DbSet<vwPurchaseMedicine> vwPurchaseMedicines { get; set; }
        public virtual DbSet<vwReportChecker> vwReportCheckers { get; set; }
        public virtual DbSet<vwSalesMedicine> vwSalesMedicines { get; set; }
        public virtual DbSet<vwAgentDue> vwAgentDues { get; set; }
        public virtual DbSet<vwDue> vwDues { get; set; }
        public virtual DbSet<vwSaleMedicine> vwSaleMedicines { get; set; }
    
        public virtual ObjectResult<CrudOperations_Result> CrudOperations(Nullable<int> productid, string productname, Nullable<int> price, string status)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CrudOperations_Result>("CrudOperations", productidParameter, productnameParameter, priceParameter, statusParameter);
        }
    
        public virtual ObjectResult<SPExpenseTamp_Result> SPExpenseTamp(Nullable<int> id, string description, Nullable<decimal> amount, string expenseType, Nullable<System.DateTime> expenseDate, Nullable<int> createdBy, string status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var expenseTypeParameter = expenseType != null ?
                new ObjectParameter("ExpenseType", expenseType) :
                new ObjectParameter("ExpenseType", typeof(string));
    
            var expenseDateParameter = expenseDate.HasValue ?
                new ObjectParameter("ExpenseDate", expenseDate) :
                new ObjectParameter("ExpenseDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPExpenseTamp_Result>("SPExpenseTamp", idParameter, descriptionParameter, amountParameter, expenseTypeParameter, expenseDateParameter, createdByParameter, statusParameter);
        }
    
        public virtual ObjectResult<string> spGetGroups(string groupName)
        {
            var groupNameParameter = groupName != null ?
                new ObjectParameter("groupName", groupName) :
                new ObjectParameter("groupName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetGroups", groupNameParameter);
        }
    
        public virtual ObjectResult<spGetServices_Result> spGetServices(string keyword)
        {
            var keywordParameter = keyword != null ?
                new ObjectParameter("keyword", keyword) :
                new ObjectParameter("keyword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetServices_Result>("spGetServices", keywordParameter);
        }
    
        public virtual ObjectResult<spIncomeTamp_Result> spIncomeTamp(Nullable<int> id, string particular, string code, Nullable<int> quantity, Nullable<decimal> rate, Nullable<decimal> amount, Nullable<int> createdBy, string status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var particularParameter = particular != null ?
                new ObjectParameter("Particular", particular) :
                new ObjectParameter("Particular", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spIncomeTamp_Result>("spIncomeTamp", idParameter, particularParameter, codeParameter, quantityParameter, rateParameter, amountParameter, createdByParameter, statusParameter);
        }
    
        public virtual ObjectResult<spIndoorIncomeTamp_Result> spIndoorIncomeTamp(Nullable<int> id, string particular, string code, Nullable<int> quantity, Nullable<decimal> rate, Nullable<decimal> amount, Nullable<int> createdBy, string status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var particularParameter = particular != null ?
                new ObjectParameter("Particular", particular) :
                new ObjectParameter("Particular", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spIndoorIncomeTamp_Result>("spIndoorIncomeTamp", idParameter, particularParameter, codeParameter, quantityParameter, rateParameter, amountParameter, createdByParameter, statusParameter);
        }
    
        public virtual ObjectResult<spIndoorService_Result> spIndoorService(Nullable<int> invoiceId)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spIndoorService_Result>("spIndoorService", invoiceIdParameter);
        }
    
        public virtual ObjectResult<spMedicineStorage_Result> spMedicineStorage()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMedicineStorage_Result>("spMedicineStorage");
        }
    
        public virtual ObjectResult<spOutdoorService_Result> spOutdoorService(Nullable<int> invoiceId)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spOutdoorService_Result>("spOutdoorService", invoiceIdParameter);
        }
    
        public virtual ObjectResult<spPurchaseMedicine_Result> spPurchaseMedicine(Nullable<int> invoiceId)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPurchaseMedicine_Result>("spPurchaseMedicine", invoiceIdParameter);
        }
    
        public virtual ObjectResult<SPPurchaseMedicineTamp_Result> SPPurchaseMedicineTamp(Nullable<int> id, string medicineName, Nullable<decimal> price, Nullable<int> quantity, Nullable<decimal> total, Nullable<int> createdBy, string status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("MedicineName", medicineName) :
                new ObjectParameter("MedicineName", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPPurchaseMedicineTamp_Result>("SPPurchaseMedicineTamp", idParameter, medicineNameParameter, priceParameter, quantityParameter, totalParameter, createdByParameter, statusParameter);
        }
    
        public virtual ObjectResult<SPSaleMedicineTamp_Result> SPSaleMedicineTamp(Nullable<int> id, string medicineName, Nullable<decimal> price, Nullable<int> quantity, Nullable<decimal> total, Nullable<int> createdBy, string status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var medicineNameParameter = medicineName != null ?
                new ObjectParameter("MedicineName", medicineName) :
                new ObjectParameter("MedicineName", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPSaleMedicineTamp_Result>("SPSaleMedicineTamp", idParameter, medicineNameParameter, priceParameter, quantityParameter, totalParameter, createdByParameter, statusParameter);
        }
    
        public virtual ObjectResult<spSalseMedicine_Result> spSalseMedicine(Nullable<int> invoiceId)
        {
            var invoiceIdParameter = invoiceId.HasValue ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSalseMedicine_Result>("spSalseMedicine", invoiceIdParameter);
        }
    
        public virtual ObjectResult<spTodayExpense_Result> spTodayExpense(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string type)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTodayExpense_Result>("spTodayExpense", startDateParameter, endDateParameter, typeParameter);
        }
    
        public virtual ObjectResult<TestProc_Result> TestProc(Nullable<int> firstNum, Nullable<int> secondNum, string name)
        {
            var firstNumParameter = firstNum.HasValue ?
                new ObjectParameter("firstNum", firstNum) :
                new ObjectParameter("firstNum", typeof(int));
    
            var secondNumParameter = secondNum.HasValue ?
                new ObjectParameter("secondNum", secondNum) :
                new ObjectParameter("secondNum", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestProc_Result>("TestProc", firstNumParameter, secondNumParameter, nameParameter);
        }
    
        public virtual ObjectResult<spDueList_Result> spDueList(Nullable<System.DateTime> toDate, Nullable<System.DateTime> fromDate)
        {
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDueList_Result>("spDueList", toDateParameter, fromDateParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spTodaySale(Nullable<System.DateTime> today, string user)
        {
            var todayParameter = today.HasValue ?
                new ObjectParameter("today", today) :
                new ObjectParameter("today", typeof(System.DateTime));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spTodaySale", todayParameter, userParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spTodaySaleService(Nullable<System.DateTime> today, string user)
        {
            var todayParameter = today.HasValue ?
                new ObjectParameter("today", today) :
                new ObjectParameter("today", typeof(System.DateTime));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spTodaySaleService", todayParameter, userParameter);
        }
    }
}
